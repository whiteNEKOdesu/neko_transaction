<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="neko.transaction.product.mapper.OrderInfoMapper">
    <resultMap id="pageQuery" type="neko.transaction.product.vo.OrderInfoPageQueryVo">
        <result property="orderId" column="order_id"></result>
        <result property="alipayTradeId" column="alipay_trade_id"></result>
        <result property="uid" column="uid"></result>
        <result property="cost" column="cost"></result>
        <result property="actualCost" column="actual_cost"></result>
        <result property="status" column="status"></result>
        <result property="createTime" column="create_time"></result>
        <result property="updateTime" column="update_time"></result>
        <collection property="orderDetailInfos" ofType="neko.transaction.product.vo.OrderInfoPageQueryVo$OrderDetailInfoVo">
            <result property="orderDetailId" column="order_detail_id"></result>
            <result property="productId" column="product_id"></result>
            <result property="productName" column="product_name"></result>
            <result property="displayImage" column="display_image"></result>
            <result property="fullCategoryName" column="full_category_name"></result>
            <result property="sellerUid" column="seller_uid"></result>
            <result property="cost" column="product_cost"></result>
            <result property="actualCost" column="product_actual_cost"></result>
            <result property="number" column="number"></result>
            <result property="status" column="product_status"></result>
        </collection>
    </resultMap>

    <update id="updateOrderInfoStatusToCancel">
        update order_info
        set status = ${@neko.transaction.commonbase.utils.entity.OrderStatus@CANCELED}
        where order_id = #{orderId} and status = ${@neko.transaction.commonbase.utils.entity.OrderStatus@UNPAID}
    </update>

    <select id="userSelfPageQuery" resultMap="pageQuery">
        select order_info.*, order_detail_info.order_detail_id,
            order_detail_info.product_id, order_detail_info.product_name,
            order_detail_info.display_image, order_detail_info.full_category_name,
            order_detail_info.seller_uid, order_detail_info.cost product_cost,
            order_detail_info.actual_cost product_actual_cost, order_detail_info.number,
            order_detail_info.`status` product_status from order_info
        join order_detail_info
        on order_info.order_id = order_detail_info.order_id
        where order_info.order_id in (
            select order_id from (
                select distinct order_info.order_id from order_info
                join order_detail_info
                on order_info.order_id = order_detail_info.order_id
                <where>
                    order_info.uid = #{uid}
                    <if test="@org.springframework.util.StringUtils@hasText(queryWords)">
                        and order_detail_info.product_name like concat(#{queryWords},'%')
                    </if>
                    <if test="@cn.hutool.core.util.ObjectUtil@isNotNull(status)">
                        and order_detail_info.status = #{status}
                    </if>
                    and order_info.status = ${@neko.transaction.commonbase.utils.entity.OrderStatus@PAID}
                    order by order_info.order_id desc
                    limit #{start}, #{limited}
                </where>
            ) sub_query
        )
        order by order_info.order_id desc
    </select>

    <select id="userSelfPageQueryNumber" resultType="int">
        select count(distinct order_info.order_id) from order_info
        join order_detail_info
        on order_info.order_id = order_detail_info.order_id
        <where>
            order_info.uid = #{uid}
            <if test="@org.springframework.util.StringUtils@hasText(queryWords)">
                and order_detail_info.product_name like concat(#{queryWords},'%')
            </if>
            <if test="@cn.hutool.core.util.ObjectUtil@isNotNull(status)">
                and order_detail_info.status = #{status}
            </if>
            and order_info.status = ${@neko.transaction.commonbase.utils.entity.OrderStatus@PAID}
        </where>
    </select>

    <select id="statusAggCount" resultType="neko.transaction.product.vo.OrderStatusAggCountVo">
        select (case
            when status = -1 then '超时'
            when status = 0 then '未支付'
            else '已支付' end
        ) status, count(status) number from order_info
        group by status
    </select>

    <select id="transactionInYear" resultType="neko.transaction.product.vo.OrderTransactionInYearVo">
        select ifnull(transaction_query.transaction_month, generate_query.generate_month) transaction_month,
            ifnull(transaction_query.number, 0) order_number,
            ifnull(transaction_query.transaction_number, 0) transaction_number from (
--                 月份表
                select 1 generate_month
                union select 2 generate_month
                union select 3 generate_month
                union select 4 generate_month
                union select 5 generate_month
                union select 6 generate_month
                union select 7 generate_month
                union select 8 generate_month
                union select 9 generate_month
                union select 10 generate_month
                union select 11 generate_month
                union select 12 generate_month
        ) generate_query
        left join (
            select month(create_time) transaction_month, count(order_id) number,
--                 减去退货的柳树
                sum(actual_cost) - (
                    select ifnull(sum(actual_cost), 0) from order_detail_info
                    where status = ${@neko.transaction.commonbase.utils.entity.OrderDetailInfoStatus@SENT_BACK} and
                        create_time >= #{year} and create_time <![CDATA[<=]]> date_add(#{year}, interval 1 year)
                ) transaction_number from order_info
            where status = ${@neko.transaction.commonbase.utils.entity.OrderStatus@PAID} and
                create_time >= #{year} and create_time <![CDATA[<=]]> date_add(#{year}, interval 1 year)
            group by month(create_time)
        ) transaction_query
        on generate_query.generate_month = transaction_query.transaction_month
        order by transaction_month
    </select>
</mapper>
